syntax = "proto3";

package buzz.protobuf;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Buzz Logical Plan
///////////////////////////////////////////////////////////////////////////////////////////////////

// logical expressions
message LogicalExprNode {

  // column references
  string column_name = 10;
  bool has_column_name = 11;

  // alias
  AliasNode alias = 14;

  // literals
  string literal_string = 21;
  bool has_literal_string = 22;

  int64 literal_int = 23;
  bool has_literal_i8 = 24;
  bool has_literal_i16 = 25;
  bool has_literal_i32 = 26;
  bool has_literal_i64 = 27;

  uint64 literal_uint = 28;
  bool has_literal_u8 = 29;
  bool has_literal_u16 = 30;
  bool has_literal_u32 = 31;
  bool has_literal_u64 = 32;

  float literal_f32 = 33;
  bool has_literal_f32 = 34;

  double literal_f64 = 35;
  bool has_literal_f64 = 36;

  // binary expressions
  BinaryExprNode binary_expr = 40;

  // aggregate expressions
  AggregateExprNode aggregate_expr = 50;
}

message AliasNode {
  LogicalExprNode expr = 1;
  string alias = 2;
}

message BinaryExprNode {
  LogicalExprNode l = 1;
  LogicalExprNode r = 2;
  string op = 3;
}

enum AggregateFunction {
  MIN = 0;
  MAX = 1;
  SUM = 2;
  AVG = 3;
  COUNT = 4;
  COUNT_DISTINCT = 5;
}

message AggregateExprNode {
  AggregateFunction aggr_function = 1;
  LogicalExprNode expr = 2;
}

// LogicalPlan is a nested type
message LogicalPlanNode {

  LogicalPlanNode input = 1;

  oneof scan {
    S3ParquetScanNode s3_parquet = 10;
    ResultScanNode result = 11;
  }

  ProjectionNode projection = 20;
  SelectionNode selection = 21;
  LimitNode limit = 22;
  AggregateNode aggregate = 23;
}

message ProjectionColumns {
  repeated string columns = 1;
}

message SizedFile {
  string key = 1;
  uint64 length = 2;
}

message S3ParquetScanNode {
  string region = 1;
  string bucket = 2;
  repeated SizedFile files = 3;
  ProjectionColumns projection = 4;
  bytes schema = 5;
}

message ResultScanNode {
  string query_id = 1;
  uint32 nb_hbee = 2;
  ProjectionColumns projection = 4;
  bytes schema = 5;
}

message ProjectionNode {
  repeated LogicalExprNode expr = 1;
}

message SelectionNode {
  LogicalExprNode expr = 2;
}

message AggregateNode {
  repeated LogicalExprNode group_expr = 1;
  repeated LogicalExprNode aggr_expr = 2;
}

message LimitNode {
  uint32 limit = 1;
}
