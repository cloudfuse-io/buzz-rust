syntax = "proto3";

package buzz.protobuf;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Buzz Logical Plan
///////////////////////////////////////////////////////////////////////////////////////////////////

// logical expressions
message LogicalExprNode {

  // column references
  string column_name = 10;
  bool has_column_name = 11;

  // alias
  AliasNode alias = 14;

  // literals
  string literal_string = 21;
  bool has_literal_string = 22;

  int64 literal_int = 23;
  bool has_literal_i8 = 24;
  bool has_literal_i16 = 25;
  bool has_literal_i32 = 26;
  bool has_literal_i64 = 27;

  uint64 literal_uint = 28;
  bool has_literal_u8 = 29;
  bool has_literal_u16 = 30;
  bool has_literal_u32 = 31;
  bool has_literal_u64 = 32;

  float literal_f32 = 33;
  bool has_literal_f32 = 34;

  double literal_f64 = 35;
  bool has_literal_f64 = 36;

  // binary expressions
  BinaryExprNode binary_expr = 40;

  // aggregate expressions
  AggregateExprNode aggregate_expr = 50;
}

message AliasNode {
  LogicalExprNode expr = 1;
  string alias = 2;
}

message BinaryExprNode {
  LogicalExprNode l = 1;
  LogicalExprNode r = 2;
  string op = 3;
}

enum AggregateFunction {
  MIN = 0;
  MAX = 1;
  SUM = 2;
  AVG = 3;
  COUNT = 4;
  COUNT_DISTINCT = 5;
}

message AggregateExprNode {
  AggregateFunction aggr_function = 1;
  LogicalExprNode expr = 2;
}

// LogicalPlan is a nested type
message LogicalPlanNode {

  LogicalPlanNode input = 1;

  ScanNode scan = 10;
  ProjectionNode projection = 20;
  SelectionNode selection = 21;
  LimitNode limit = 22;
  AggregateNode aggregate = 23;
}

message ProjectionColumns {
  repeated string columns = 1;
}

//TODO break this out into separate CsvScanNode and ParquetScanNode
message ScanNode {
  string path = 1;
  ProjectionColumns projection = 2;
  Schema schema = 3;
  string file_format = 4; // parquet or csv
  bool has_header = 5; // csv specific
}

message ProjectionNode {
  repeated LogicalExprNode expr = 1;
}

message SelectionNode {
  LogicalExprNode expr = 2;
}

message AggregateNode {
  repeated LogicalExprNode group_expr = 1;
  repeated LogicalExprNode aggr_expr = 2;
}

message LimitNode {
  uint32 limit = 1;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Arrow Data Types
///////////////////////////////////////////////////////////////////////////////////////////////////

message Schema {
  repeated Field columns = 1;
}

message Field {
  // name of the field
  string name = 1;
  ArrowType arrow_type = 2;
  bool nullable = 3;
  // for complex data types like structs, unions
  repeated Field children = 4;
}

// copied from GandivaType from Apache Arrow project
enum ArrowType {
  NONE = 0;     // arrow::Type::NA
  BOOL = 1;     // arrow::Type::BOOL
  UINT8 = 2;    // arrow::Type::UINT8
  INT8 = 3;     // arrow::Type::INT8
  UINT16 = 4;   // represents arrow::Type fields in src/arrow/type.h
  INT16 = 5;
  UINT32 = 6;
  INT32 = 7;
  UINT64 = 8;
  INT64 = 9;
  HALF_FLOAT = 10;
  FLOAT = 11;
  DOUBLE = 12;
  UTF8 = 13;
  BINARY = 14;
  FIXED_SIZE_BINARY = 15;
  DATE32 = 16;
  DATE64 = 17;
  TIMESTAMP = 18;
  TIME32 = 19;
  TIME64 = 20;
  INTERVAL = 21;
  DECIMAL = 22;
  LIST = 23;
  STRUCT = 24;
  UNION = 25;
  DICTIONARY = 26;
  MAP = 27;
}